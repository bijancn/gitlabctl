name: Main workflow
on:
  push:
    paths-ignore:
      - "docs/**"
      - "**.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**.md"

jobs:
  # Run the `rustfmt` code formatter
  rustfmt:
    name: Rustfmt [Formatter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          components: rustfmt
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Run the `clippy` linting tool
  clippy:
    name: Clippy [Linter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          components: clippy
          override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D clippy::all

  # Run a security audit on dependencies
  cargo_audit:
    name: Cargo Audit [Security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: beta
          override: true
      - run: cargo install --force cargo-audit
      - run: cargo generate-lockfile
      - uses: actions-rs/cargo@v1
        with:
          command: audit

  # Ensure that the project could be successfully compiled
  cargo_check:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all

  # Run tests on Linux, macOS, and Windows
  # On both Rust stable and Rust nightly
  test:
    name: Test Suite
    needs: [cargo_check]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: [stable, nightly]
    steps:
      # Checkout the branch being tested
      - uses: actions/checkout@v1

      # Install all the required dependencies for testing
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true

      # Run the ignored tests that expect the above setup
      - name: Run all tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -- -Z unstable-options --include-ignored

  # Publish starship to Crates.io
  cargo_publish:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Publish Cargo Package
    needs: [test, docker_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true
      - run: cargo login $CRATES_IO_TOKEN
      - run: cargo publish
    env:
      CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  # Create a PR to bump the brew formula version
  brew_bump_formula:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Bump Brew Formula
    needs: [test, docker_test]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - run: |
          git config user.email "bot@starship.rs"
          git config user.name "Starship Bot"
          cd $(brew --repo homebrew/core)
          git fetch origin
          sudo git reset --hard origin/master
          cd -
      - run: brew bump-formula-pr --url=https://github.com/starship/starship/archive/$(git describe --tags).tar.gz --message="Automated release pull request using continuous integration." --no-browse -v starship --force
    env:
      HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}
